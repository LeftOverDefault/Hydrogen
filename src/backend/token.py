# token_types = {
#     "+": "ADDITION",
#     "-": "SUBTRACTION",
#     "*": "MULTIPLICATION",
#     "/": "DIVISION",
#     "%": "MODULO",
#     "**": "EXPONENT",
#     "//": "FLOOR_DIVISION",
#     "=": "EQUAL",
#     "<": "LESS_THAN",
#     ">": "GREATER_THAN",
#     "_": "UNDERSCORE",
#     ":": "COLON",
#     ";": "SEMICOLON",
#     ".": "DOT",
#     ",": "COMMA",
#     "'": "QUOTE",
#     "\"": "DOUBLE_QUOTE",
#     "/*": "START_COMMENT_LINE",
#     "*/": "END_COMMENT_LINE",
#     "(": "LEFT_PARENTHESIS",
#     ")": "RIGHT_PARENTHESIS",
#     "[": "LEFT_BRACE",
#     "]": "RIGHT_BRACE",
#     "{": "LEFT_BRACKET",
#     "}": "RIGHT_BRACKET",
#     "==": "DOUBLE_EQUAL",
#     "!=": "NOT_EQUAL",
#     "<=": "LESS_THAN_EQUAL",
#     ">=": "GREATER_THAN_EQUAL",
#     "__": "DOUBLE_UNDERSCORE",
#     "&&": "AND",
#     "||": "OR",
#     "!": "NOT",
#     "str": "STRING",
#     "number": "NUMBER",
#     "bool": "BOOL",
#     "arr": "ARRAY",
#     "list": "LIST",
#     "tuple": "TUPLE",
#     "char": "CHAR",
#     "stack": "STACK",
#     "queue": "QUEUE",
#     "dict": "DICTIONARY",
#     "if": "IF_STATEMENT",
#     "elif": "ELIF_STATEMENT",
#     "else": "ELSE_STATEMENT",
#     "let": "VAR_DECLARATION",
#     "const": "CONSTANT_DECLARATION",
#     "while": "WHILE_LOOP",
#     "for": "FOR_LOOP",
#     "ident": "IDENTIFIER",
#     "func": "FUNCTION",
#     "expr": "EXPRESSION",
#     "object": "OBJECT",
#     "return": "RETURN",
#     "yield": "YIELD",
#     "async": "ASYNCHRONOUS",
#     "@": "DECORATOR",
#     "import": "IMPORT",
#     "from": "FROM_IMPORT",
#     "eof": "EOF"
# }

# keywords = {
#     "if": token_types["if"],
#     "elif": token_types["elif"],
#     "else": token_types["else"],
#     "and": token_types["&&"],
#     "or": token_types["||"],
#     "not": token_types["!"],
#     "let": token_types["let"],
#     "const": token_types["const"],
#     "while": token_types["while"],
#     "for": token_types["for"],
#     "def": token_types["func"],
#     "class": token_types["object"],
#     "async": token_types["async"],
#     "return": token_types["return"],
#     "yield": token_types["yield"],
#     "true": token_types["bool"],
#     "false": token_types["bool"],
#     "import": token_types["import"],
#     "from": token_types["from"],
# }

# data_types = {
#     "Str": token_types["str"],
#     "Int": token_types["number"],
#     "Float": token_types["number"],
#     "Bool": token_types["bool"],
#     "Array": token_types["arr"],
#     "List": token_types["list"],
#     "Stack": token_types["stack"],
#     "Queue": token_types["queue"],
#     "Tuple": token_types["tuple"],
#     "Dict": token_types["dict"],
# }


# def token(value, token_type) -> dict:
#     return {
#         "type": token_type,
#         "value": value,
#     }


token_types = {
    "+": "ADDITION",
    "-": "SUBTRACTION",
    "*": "MULTIPLICATION",
    "/": "DIVISION",
    "%": "MODULO",
    "**": "EXPONENT",
    "//": "FLOOR_DIVISION",
    "=": "EQUAL",
    ";": "SEMICOLON",
    "<": "LESS_THAN",
    ">": "GREATER_THAN",
    "_": "UNDERSCORE",
    ":": "COLON",
    ";": "SEMICOLON",
    ".": "DOT",
    ",": "COMMA",
    "'": "QUOTE",
    "\"": "DOUBLE_QUOTE",
    "/*": "START_COMMENT_LINE",
    "*/": "END_COMMENT_LINE",
    "(": "LEFT_PARENTHESIS",
    ")": "RIGHT_PARENTHESIS",
    "[": "LEFT_BRACE",
    "]": "RIGHT_BRACE",
    "{": "LEFT_BRACKET",
    "}": "RIGHT_BRACKET",
    "==": "DOUBLE_EQUAL",
    "!=": "NOT_EQUAL",
    "<=": "LESS_THAN_EQUAL",
    ">=": "GREATER_THAN_EQUAL",
    "__": "DOUBLE_UNDERSCORE",
    "&&": "AND",
    "||": "OR",
    "!": "NOT",
    "str": "STRING",
    "number": "NUMBER",
    "bool": "BOOL",
    "arr": "ARRAY",
    "list": "LIST",
    "tuple": "TUPLE",
    "char": "CHAR",
    "stack": "STACK",
    "queue": "QUEUE",
    "dict": "DICTIONARY",
    "if": "IF_STATEMENT",
    "elif": "ELIF_STATEMENT",
    "else": "ELSE_STATEMENT",
    "let": "VAR_DECLARATION",
    "const": "CONSTANT_DECLARATION",
    "while": "WHILE_LOOP",
    "for": "FOR_LOOP",
    "ident": "IDENTIFIER",
    "func": "FUNCTION",
    "expr": "EXPRESSION",
    "object": "OBJECT",
    "return": "RETURN",
    "yield": "YIELD",
    "async": "ASYNCHRONOUS",
    "@": "DECORATOR",
    "import": "IMPORT",
    "from": "FROM_IMPORT",
    "null": "NULL",
    "eof": "END_OF_FILE"
}

keywords = {
    "if": token_types["if"],
    "elif": token_types["elif"],
    "else": token_types["else"],
    "and": token_types["&&"],
    "or": token_types["||"],
    "not": token_types["!"],
    "let": token_types["let"],
    "const": token_types["const"],
    "while": token_types["while"],
    "for": token_types["for"],
    "def": token_types["func"],
    "class": token_types["object"],
    "async": token_types["async"],
    "return": token_types["return"],
    "yield": token_types["yield"],
    "true": token_types["bool"],
    "false": token_types["bool"],
    "import": token_types["import"],
    "from": token_types["from"],
    "null": token_types["null"],
    # "str": token_types["str"],
    # "int": token_types["number"],
    # "float": token_types["number"],
    # "bool": token_types["bool"],
    # "array": token_types["arr"],
    # "list": token_types["list"],
    # "stack": token_types["stack"],
    # "queue": token_types["queue"],
    # "tuple": token_types["tuple"],
    # "dict": token_types["dict"],
}


def token(value, token_type: token_types.keys()):
    return {
        "type": token_type,
        "value": value
    }